bal_pps <- bal.tab(weight_pps)
# Run models
reg_naive <- lm(y ~ t)
#reg_true <- lm(y ~ t+z1+z2+z3+z4)
reg_ps <- lm(y ~ t, weights = get.w(weight_ps))
reg_eb <- lm(y ~ t, weights = get.w(weight_eb))
reg_gb <- lm(y ~ t, weights = get.w(weight_gb))
reg_pps <- lm(y ~ t, weights = get.w(weight_pps))
# Store results
sim2$z1 <- rbind(bal_raw$Balance$Diff.Un[1],
bal_ps$Balance$Diff.Adj[2],
bal_gb$Balance$Diff.Adj[2],
bal_eb$Balance$Diff.Adj[1],
bal_pps$Balance$Diff.Adj[2])
sim2$z2 <- rbind(bal_raw$Balance$Diff.Un[2],
bal_ps$Balance$Diff.Adj[3],
bal_gb$Balance$Diff.Adj[3],
bal_eb$Balance$Diff.Adj[2],
bal_pps$Balance$Diff.Adj[3])
sim2$z3 <- rbind(bal_raw$Balance$Diff.Un[3],
bal_ps$Balance$Diff.Adj[4],
bal_gb$Balance$Diff.Adj[4],
bal_eb$Balance$Diff.Adj[3],
bal_pps$Balance$Diff.Adj[4])
sim2$z4 <- rbind(bal_raw$Balance$Diff.Un[4],
bal_ps$Balance$Diff.Adj[5],
bal_gb$Balance$Diff.Adj[5],
bal_eb$Balance$Diff.Adj[4],
bal_pps$Balance$Diff.Adj[5])
sim2$a <- rbind(mean(bal_raw$Balance$Diff.Un[c(5:9)]),
mean(bal_ps$Balance$Diff.Adj[c(6:10)]),
mean(bal_gb$Balance$Diff.Adj[c(6:10)]),
mean(bal_eb$Balance$Diff.Adj[c(4:9)]),
mean(bal_pps$Balance$Diff.Adj[c(6:10)]))
sim2$u <- rbind(mean(bal_raw$Balance$Diff.Un[c(10:19)]),
mean(bal_ps$Balance$Diff.Adj[c(11:20)]),
mean(bal_gb$Balance$Diff.Adj[c(11:20)]),
mean(bal_eb$Balance$Diff.Adj[c(10:19)]),
mean(bal_pps$Balance$Diff.Adj[c(11:20)]))
sim2$bias <- rbind(reg_naive$coefficients["t"],
reg_ps$coefficients["t"],
reg_gb$coefficients["t"],
reg_eb$coefficients["t"],
reg_pps$coefficients["t"])
sim2$se <- rbind(summary(reg_naive)$coefficients[2,2],
summary(reg_ps)$coefficients[2,2],
summary(reg_gb)$coefficients[2,2],
summary(reg_eb)$coefficients[2,2],
summary(reg_pps)$coefficients[2,2])
sim2$ess <- rbind(sum(bal_raw$Observations[2,])/n,
sum(bal_ps$Observations[2,])/n,
sum(bal_gb$Observations[2,])/n,
sum(bal_eb$Observations[2,])/n,
sum(bal_pps$Observations[2,])/n)
sim2$coverage <- ifelse(sim1$bias+(sim1$se*1.96)>0 &
sim1$bias-(sim1$se*1.96)<0, 1, 0)
return(sim2)
}, simplify = FALSE) |> dplyr::bind_rows()
n <- 1000
sim2 <- data.frame(method = c("raw","ps","gb","eb","pps"),
z1 = NA, z2 = NA, z3 = NA, z4 = NA,
a = NA, u = NA,
bias = NA, se = NA, ess = NA,
rmse = NA, coverage = NA)
sim_results2 <- replicate(1000,{
#########
# DGP 2 #
#########
### Generate Zs
z1 <- rnorm(n)
z2 <- rnorm(n)
z3 <- rnorm(n)
z4 <- rnorm(n)
Z <- as.matrix(data.frame(z1, z2, z3, z4))
### Generate Y
error <- rnorm(n)
f0 <- 8*z1 + 4*z2 + 2*z3 + 1*z4
error_sigma <- 9.21
y <-  f0 + (error_sigma * error)
### Probability of treatment and assignment
mx <- 0.20*z1 + 0.20*z2 + 0.20*z3 + 0.20*z4
prob <- 1/(1 + exp(-mx))
t <- 1*(runif(n, min=0, max=1)<prob)
### Make Distractor variables (A) and extraneous variables (U)
plus_p <- 5
A <- t + matrix(rnorm(n*plus_p), nrow=n)
colnames(A) <- paste("a", 1:plus_p, sep="")
plus_p2 <- 10
U <- matrix(rnorm(n*plus_p2), nrow=n)
colnames(U) <- paste("u", 1:plus_p2, sep="")
### Combine Z, A, U into X matrix of observed covariates
X <- cbind(Z, A, U)
### Create data frame
dgp2 <- data.frame(cbind(y,t,X))
# Balance methods
weight_ps <- weightit(t ~ X, method = "ps")
weight_gb <- weightit(t ~ X, method = "gbm")
weight_eb <- weightit(t ~ X, method = "ebal")
# Prognostic propensity score
reg_y0 <- lm(y ~ z1+z2+z3+z4+
a1+a2+a3+a4+a5+
u1+u2+u3+u4+u5+
u6+u7+u8+u9+u10,
data = subset(dgp2, t==0))
y0_hat <- predict(reg_y0, type = "response", newdata = dgp2)
dgp2$pps <- glm(t ~ y0_hat, family = binomial) |>
predict(type = "response")
weight_pps <- weightit(t ~ z1+z2+z3+z4+
a1+a2+a3+a4+a5+
u1+u2+u3+u4+u5+
u6+u7+u8+u9+u10,
ps = "pps",
data = dgp2)
# Assess balance
bal_raw <- bal.tab(t ~ X)
bal_ps <- bal.tab(weight_ps)
bal_gb <- bal.tab(weight_gb)
bal_eb <- bal.tab(weight_eb)
bal_pps <- bal.tab(weight_pps)
# Run models
reg_naive <- lm(y ~ t)
#reg_true <- lm(y ~ t+z1+z2+z3+z4)
reg_ps <- lm(y ~ t, weights = get.w(weight_ps))
reg_eb <- lm(y ~ t, weights = get.w(weight_eb))
reg_gb <- lm(y ~ t, weights = get.w(weight_gb))
reg_pps <- lm(y ~ t, weights = get.w(weight_pps))
# Store results
sim2$z1 <- rbind(bal_raw$Balance$Diff.Un[1],
bal_ps$Balance$Diff.Adj[2],
bal_gb$Balance$Diff.Adj[2],
bal_eb$Balance$Diff.Adj[1],
bal_pps$Balance$Diff.Adj[2])
sim2$z2 <- rbind(bal_raw$Balance$Diff.Un[2],
bal_ps$Balance$Diff.Adj[3],
bal_gb$Balance$Diff.Adj[3],
bal_eb$Balance$Diff.Adj[2],
bal_pps$Balance$Diff.Adj[3])
sim2$z3 <- rbind(bal_raw$Balance$Diff.Un[3],
bal_ps$Balance$Diff.Adj[4],
bal_gb$Balance$Diff.Adj[4],
bal_eb$Balance$Diff.Adj[3],
bal_pps$Balance$Diff.Adj[4])
sim2$z4 <- rbind(bal_raw$Balance$Diff.Un[4],
bal_ps$Balance$Diff.Adj[5],
bal_gb$Balance$Diff.Adj[5],
bal_eb$Balance$Diff.Adj[4],
bal_pps$Balance$Diff.Adj[5])
sim2$a <- rbind(mean(bal_raw$Balance$Diff.Un[c(5:9)]),
mean(bal_ps$Balance$Diff.Adj[c(6:10)]),
mean(bal_gb$Balance$Diff.Adj[c(6:10)]),
mean(bal_eb$Balance$Diff.Adj[c(4:9)]),
mean(bal_pps$Balance$Diff.Adj[c(6:10)]))
sim2$u <- rbind(mean(bal_raw$Balance$Diff.Un[c(10:19)]),
mean(bal_ps$Balance$Diff.Adj[c(11:20)]),
mean(bal_gb$Balance$Diff.Adj[c(11:20)]),
mean(bal_eb$Balance$Diff.Adj[c(10:19)]),
mean(bal_pps$Balance$Diff.Adj[c(11:20)]))
sim2$bias <- rbind(reg_naive$coefficients["t"],
reg_ps$coefficients["t"],
reg_gb$coefficients["t"],
reg_eb$coefficients["t"],
reg_pps$coefficients["t"])
sim2$se <- rbind(summary(reg_naive)$coefficients[2,2],
summary(reg_ps)$coefficients[2,2],
summary(reg_gb)$coefficients[2,2],
summary(reg_eb)$coefficients[2,2],
summary(reg_pps)$coefficients[2,2])
sim2$ess <- rbind(sum(bal_raw$Observations[2,])/n,
sum(bal_ps$Observations[2,])/n,
sum(bal_gb$Observations[2,])/n,
sum(bal_eb$Observations[2,])/n,
sum(bal_pps$Observations[2,])/n)
sim2$coverage <- ifelse(sim2$bias+(sim2$se*1.96)>0 &
sim2$bias-(sim2$se*1.96)<0, 1, 0)
return(sim2)
}, simplify = FALSE) |> dplyr::bind_rows()
View(sim2)
View(sim_results2)
sim_results2 <- sim_results2 |> dplyr::mutate(
method = dplyr::case_when(
method == "raw" ~ "1. Raw",
method == "ps" ~ "2. PSW",
method == "gb" ~ "3. GBM",
method == "eb" ~ "5. Ebal",
method == "pps" ~ "6. PPSW"),
focal = ifelse(method == "6. PPSW", "red", "black")
)
path_results <-
"/Users/pdgeraldo/Documents/Projects/stats_ms/results/"
write.csv(sim_results2,
file = paste0(path_results,"dgp2_results.csv"))
sim_results2 |>
ggplot(aes(y = z1, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Imbalance after weighting: Z1",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_z1.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
sim_results2 |>
ggplot(aes(y = z2, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Imbalance after weighting: Z2",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_z2.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
sim_results2 |>
ggplot(aes(y = z3, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Imbalance after weighting: Z3",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_z3.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
sim_results2 |>
ggplot(aes(y = z4, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Imbalance after weighting: Z4",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_z4.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
sim_results2 |>
ggplot(aes(y = a, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Imbalance after weighting: A (average)",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_a.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
sim_results2 |>
ggplot(aes(y = u, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Imbalance after weighting: U (average)",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_u.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
sim_results2 |>
ggplot(aes(y = bias, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Bias in point estimates after weighting",
subtitle = "True Effect = 0",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_bias.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
# Standard Errors
sim_results2 |>
ggplot(aes(y = se, x = method)) +
geom_boxplot() +
geom_vline(color = "dodgerblue", xintercept = 5,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Standard Errors after weighting",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp2_bal_se.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
sim_results2 |>
dplyr::mutate(rmse = bias^2) |>
dplyr::group_by(method) |>
dplyr::summarise(Bias = mean(bias),
RMSE = sqrt(mean(rmse)),
Coverage = mean(coverage),
RESS = mean(ess)) |>
xtable()
library(knitr);library(pander);suppressMessages(library(tidyverse))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
#opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE)
opts_chunk$set(out.width='650px', dpi=250)
opts_chunk$set(cache=TRUE)
options(encoding = 'UTF-8')
panderOptions('digits', 4)
suppressMessages(library("ggdag"))
library(ggdag)
suppressMessages(library("ggdag"))
library(ggdag)
library(igraph)
install.packages(igraph)
install.packages("igraph")
install.packages("igraph")
suppressMessages(library("ggdag"))
# Bias (Point estimate)
tfb |>
dplyr::select(kbal_aug.bias,
kom.bias, kom_aug.bias,
tfb_krls.bias) |>
dplyr::mutate(N = 1000) |>
tidyr::pivot_longer(!N,
names_to = "method",
values_to = "bias") |>
dplyr::bind_rows(
sim_results[sim_results$method == "6. PPSW",c("method","bias")]) |>
ggplot(aes(y = bias, x = method)) +
geom_boxplot() +
geom_hline(color = "red", yintercept = 0, linetype = "dashed") +
geom_vline(color = "dodgerblue", xintercept = 1,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Bias in point estimates after weighting",
subtitle = "True Effect = 0",
x = "Balancing method", y = "")
ggsave(filename = paste0(path_results,"dgp1_bal_bias_tfb.pdf"),
width = 18, height = 12, dpi = 300, units = "cm")
# Standard Errors
tfb |>
ggplot(aes(y = se, x = method)) +
geom_boxplot() +
geom_vline(color = "dodgerblue", xintercept = 6,
alpha = 0.15, size = 20) +
theme_bw() +
labs(title = "Standard Errors after weighting",
x = "Balancing method", y = "")
name(tfb)
names(tfb)
tfb |>
dplyr::mutate(rmse = bias^2) |>
dplyr::group_by(method) |>
dplyr::summarise(Bias = mean(bias),
RMSE = sqrt(mean(rmse)),
Coverage = mean(coverage),
RESS = mean(ess)) |>
xtable()
library(knitr);library(pander);suppressMessages(library(tidyverse))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
#opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE)
opts_chunk$set(out.width='650px', dpi=250)
opts_chunk$set(cache=FALSE)
options(encoding = 'UTF-8')
panderOptions('digits', 4)
library("cobalt") # Package to assess covariate balance
library("causalsens") # lalonde experimental vs lalonde observational
####################
### DATA LOADING ###
####################
# First, let's load the experimental dataset (lalonde.exp)
data(lalonde.exp, package="causalsens")
# Then also the observational dataset (lalonde.psid)
data(lalonde.psid, package="causalsens")
########################
### BASELINE BALANCE ###
########################
library("ebal") # Entropy balance (and matrixmaker function)
# Let's expand the matrix of covariates
lalonde.exp.covs <- lalonde.exp %>% select(-"treat",-"re78") %>% matrixmaker()
lalonde.obs.covs <- lalonde.psid %>% select(-"treat",-"re78") %>% matrixmaker()
# Then list the covariates we will be using in the analysis
# Raw covariates are the original 10
# Covs include the expansion of covariates (powers and interactions)
covs_raw <- lalonde.exp %>% select(-re78, -treat) %>% names()
covs <- names(lalonde.obs.covs)
# Create a single dataset with both obs and experimental data
# Just to plot balance in both
lalonde.mix <-
rbind(lalonde.exp.covs %>%
mutate(treat = lalonde.exp$treat, wexp=1, wobs=ifelse(treat==1,1,0)),
lalonde.obs.covs[lalonde.psid$treat==0,] %>% # Observational controls
mutate(treat=0, wexp=0, wobs=1))
bal.tab(f.build("treat", covs), data=lalonde.mix,
estimand = "ATT", m.threshold =.1,
disp.var.ratio=FALSE, disp.means=TRUE,
weights = c("wexp","wobs")) %>% # Weigght for experimental and observational sample
love.plot(abs=FALSE,
sample.names =
c("Combined","Experimental","Observational")) +
labs(title= " ") + theme(legend.position = "top")
library("estimatr") # Lin estimator
# Bivariate regression on experimental data: 1,794 USD
exp_biv <- lm(re78 ~ treat, data=lalonde.exp)
# Lin estimator (treatment fully interacted) on experimental data: 1,583 USD
exp_lin <- lm_lin(f.build("re78", "treat"), covariates = f.build("", covs_raw), data=lalonde.exp)
# Bivariate linear regression on observational data: -15,205 USD
obs_biv <- lm(re78 ~ treat, data=lalonde.psid)
# Multiple regression with controls on observational data: 4.159 USD
obs_reg <- lm(f.build("re78", c("treat", covs_raw)), data=lalonde.psid)
# Combine results (Store in a matrix for plotting)
level_order <- c("Experimental (diff-in-means)","Experimental (Lin estimator)",
"Observational (Regression)","Observational (diff-in-means)")
# Compile the resulting coefficients into a single matrix
coeffs_baseline <-
tibble(estimator =
factor((c("Experimental (diff-in-means)",
"Experimental (Lin estimator)",
"Observational (Regression)",
"Observational (diff-in-means)")), levels=level_order),
coeff = c(exp_biv$coefficients[2],
exp_lin$coefficients[2],
obs_reg$coefficients[2],
obs_biv$coefficients[2]),
se = c(summary(exp_biv)$coefficients[2,2],
exp_lin$std.error[2],
summary(obs_reg)$coefficients[2,2],
summary(obs_biv)$coefficients[2,2]))
# Create the annotated plot
ggplot(coeffs_baseline, aes(x=coeff, y=estimator)) +
geom_point() +
# Error bars (Confidence intervals)
geom_errorbarh(aes(x=coeff, y=estimator,
xmin=coeff-2*se, xmax=coeff+2*se),
height=0) +
geom_vline(xintercept = 0, linetype="dashed", color="red") +
# Annotations (point estimates)
annotate("text", x = -2500, y = 1, label = "1,794 USD") +
annotate("text", x = -2500, y = 2, label = "1,583 USD") +
annotate("text", x = -4000, y = 3, label = "4.159 USD") +
annotate("text", x = -10000, y = 4, label = "-15,205 USD") +
# Labels
theme_classic() +
labs(title = "Estimated return of the NSW training program",
subtitle = "(Outcome: Earnings in 1978)",
x = " ", y= " ")
covs
weight_ps <- weightit(f.build("treat",covs), method = "ps",
data = lalonde.obs)
lalonde.obs <- cbind(lalonde.psid[,c("treat","re78")],
lalonde.obs.covs)
weight_ps <- weightit(f.build("treat",covs), method = "ps",
data = lalonde.obs)
weight_gb <- weightit(f.build("treat",covs), method = "gbm",
data = lalonde.obs)
weight_eb <- weightit(f.build("treat",covs), method = "ebal",
data = lalonde.obs)
# Prognostic propensity score
reg_y0 <- lm(f.build("re78", covs), data = subset(lalonde.obs, treat==0))
y0_hat <- predict(reg_y0, type = "response", newdata = lalonde.obs)
lalonde.obs$pps <- glm(t ~ y0_hat, family = binomial) |>
predict(type = "response")
length(y0_hat)
length(lalonde.obs)
dim(lalonde.obs)
lalonde.obs$pps <- glm(treat ~ y0_hat,
family = binomial,
data = lalonde.obs) |>
predict(type = "response")
weight_pps <- weightit(f.build("treat",covs), ps = "pps",
data = lalonde.obs)
bal_ps <- bal.tab(weight_ps)
bal_gb <- bal.tab(weight_gb)
bal_eb <- bal.tab(weight_eb)
weight_eb
bal_eb <- bal.tab(weight_eb)
summary(bal_eb)
bal_eb
weight_eb
bal_eb <- bal.tab(weight_eb)
bal_pps <- bal.tab(weight_pps)
weight_eb <- weightit(f.build("treat",covs), method = "ebal",
data = lalonde.obs)
weight_eb
bal_eb <- bal.tab(weight_eb)
reg_pps <- lm(re78 ~ treat, weights = get.w(weight_pps),
data = lalonde.obs)
summary(reg_pps)
bal_pps
summary(reg_pps)
love.plot(bal_pps)
bal_eb
bal.tab(f.build("treat", covs), data=lalonde.obs,
estimand = "ATT", m.threshold =.1,
disp.var.ratio=FALSE, disp.means=TRUE,
weights = list(ipw = get.w(bal_ps), #IPW weights
gb = get.w(bal_gb),
pps = get.w(bal_pps))) %>%
love.plot(abs=FALSE,
sample.names =
c("Unadjusted",
"IPW","GBM","PPSW")) +
labs(title= " ") + theme(legend.position = "top")
bal.tab(f.build("treat", covs), data=lalonde.obs,
estimand = "ATT", m.threshold =.1,
disp.var.ratio=FALSE, disp.means=TRUE,
weights = list(ipw = get.w(weight_ps), #IPW weights
gb = get.w(weight_gb),
pps = get.w(weight_pps))) %>%
love.plot(abs=FALSE,
sample.names =
c("Unadjusted",
"IPW","GBM","PPSW")) +
labs(title= " ") + theme(legend.position = "top")
xtable(c(reg_ps,reg_gb,reg_ppw))
xtable(c(reg_ps,reg_gb,reg_pps))
summary(reg_pps)
getwd()
setwd("/Users/pdgeraldo/Documents/GitHub/prognostic_propensity")
getwd
getwd()
